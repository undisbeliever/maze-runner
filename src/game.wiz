// This file is part of Maze Runner.
// Copyright (c) 2019, Marcus Rowe <undisbeliever@gmail.com>.
// Distributed under The MIT License, see the LICENSE file for more details.

import "memmap";
import "variables";
import "common/dma";
import "common/reset";
import "common/joypad";
import "common/interrupts";
import "../wiz/examples/snes/common/snes/snes";

import "../gen/mode7-perepective-hdma.wiz";

namespace game {

let MAP_TILE_WIDTH      = 128;
let MAP_TILE_HEIGHT     = 128;
let MAP_TILE_SIZE       = MAP_TILE_WIDTH * MAP_TILE_HEIGHT;

// All colours less than this value are considered non-solid
let FIRST_SOLID_COLOR   = 2;

let P1_STARTING_TILE    = 0x04;

let TARGET_TILE         = 0x01;
let SMALL_TARGET_TILE   = 0x02;

let SNAKE_NORTH_TILE      = 0x0b;
let SNAKE_HALF_NORTH_TILE = 0x09;

let SNAKE_HEAD_TILE_ID    = P1_STARTING_TILE;

// All tiles greater than this value are treated as solid
let FIRST_MOVEMENT_TILE = 6;


namespace levels {
    in rodata1 {
        const map01 = embed "../gen/map01.m7map";
    }
}

in rodata2 {
    const mode7_tiles   = embed "../gen/mode-7-tiles.m7tiles";
    const mode7_palette = embed "../gen/mode-7-tiles.pal";
    const snake_movement_tiles = embed "../gen/snake-movement-tiles.m7tiles";
}

enum Direction : u8 {
    NORTH,
    EAST,
    SOUTH,
    WEST,
    NONE,
    DEAD,
};
let DIRECTION_MOVEMENT_MASK = 3;
let N_MOVEMENT_DIRECTIONS = 4;


in rodata0 {
    const dual_direction_tiles : [u8] = [
// current direction:   north   east    south   west
                        0xB,    0xE,    0x5,    0xC,    //   north
                        0xD,    0xA,    0xC,    0x5,    //   east
                        0x5,    0xF,    0xB,    0xD,    //   south
                        0xF,    0x5,    0xE,    0xA,    //   west
        ];                                              // previous direction
    const half_direction_tiles : [u8] = [
                        0x9,    0x6,    0x8,    0x7,
        ];
    let INVALID_MOVEMENT_TILE = 0x5;


    const snake_head_movement_tile_ids : [u8] = [
// current direction:   north   east    south    west
                        0x0*8,  0x2*8,  0xff,    0x1*8, //   north
                        0x5*8,  0x3*8,  0x4*8,   0xff,  //   east
                        0xff,   0x8*8,  0x6*8,   0x7*8, //   south
                        0xb*8,  0xff,   0xa*8,   0x9*8, //   west
        ];                                              // previous direction
    let LAST_SNAKE_HEAD_TILE = 96;
}


in shadow {
    // Number of targets left in the game
    var n_targets_left : u16;

    var targets_eaten : u16;

    struct u16point {
        x : u16,
        y : u16,
    };
    // Position of the camera
    var position : u16point;

    // The current rotation of the camera
    // If `camera_rotation` >= `mode7_hdma_data.N_ROTATIONS`, then HDMA perspective is disabled.
    var camera_rotation : u8;

    // Holds the position within the tile
    // Incremented every frame
    // When value is 4 the snake changes direction
    // When value is 8 the snake advances one tile and reset to 0
    var tile_movement_counter : u8;

    var current_tile_index : u16;

    // The value of the current tile under the `current_tile_index`
    // before the snake waked over it.
    var current_tile_id : u8;

    // Current direction of movement
    var direction : Direction;

    // Previous direction
    // (used to determine which corner pieces to use)
    var previous_direction : Direction;

    // Next direction to move (input buffer)
    var next_direction : Direction;

    // A buffer to store the head tile of the snake
    // Transferred to VRAM on every frame
    var snake_head_tile : [u8 ; 64];


    // The next tile to update the tiles during VBlank
    struct VBlankTileQueue{
        tile_value : u8,
        tile_address : u16,
    };
    var vblank_tile_queue : [VBlankTileQueue ; 6];
    var vblank_tile_queue_pos : u16;
}

in wram7e {
    var map : [u8 ; MAP_TILE_SIZE];
}


in code {

#[mem8, idx16]
inline func get_map_tile(index : u16 in xx) : u8 in a {
    // ::ANNOY This is the only way to force wiz to use long addressing mode::
    return a = ((far &map as u24) as far *u8)[xx];
}

#[mem8, idx16]
inline func set_map_tile_imm(index : u16 in xx, value : u8 in a) {
    // ::ANNOY This is the only way to force wiz to use long addressing mode::
    ((far &map as u24) as far *u8)[xx] = a;
}


#[mem8, idx16]
inline func load_map(map_bank : u8 in a, map_addr : u16 in yy) {
    push8(data_bank);

    push8(a);
    data_bank = pop8();

    xx = 0;
    do {
        a = *((0 + yy) as *u8);

        set_map_tile_imm(xx, a);

        yy++;
        xx++;
    } while (xx < MAP_TILE_SIZE);

    data_bank = pop8();
}

#[mem8, idx16]
inline func init_ppu() {
    wait_for_vblank();

    reset_registers();

    // Force blank
    snes.ppu.brightness = a = snes.ppu.BRIGHTNESS_FORCE_BLANK;

    snes.ppu.bg_mode = a = 7;

    snes.ppu.mode7_control = a = snes.ppu.MODE7_CONTROL_FIELD_SIZE_HUGE | snes.ppu.MODE7_CONTROL_EMPTY_TRANSPARENT_FILL;

    snes.ppu.screen_enable_mask = a = snes.ppu.SCREEN_ENABLE_BG1;
    snes.ppu.sub_screen_enable_mask = a = snes.ppu.SCREEN_ENABLE_BG1;


    snes.ppu.cgram_address = 0;
    transfer_to_cgram(#:far& mode7_palette, &mode7_palette as u16, sizeof(typeof(mode7_palette)));

    snes.ppu.vram_address_hl = xx = 0;
    transfer_vram_h(#:far& mode7_tiles, &mode7_tiles as u16, sizeof(typeof(mode7_tiles)));

    snes.ppu.vram_address_hl = xx = 0;
    transfer_vram_l(#:far& map, &map as u16, sizeof(typeof(map)));
}


#[mem8, idx16]
inline func init() {
    load_map(#:far& levels.map01, &levels.map01 as u16);


    // Reset values

    xx = 0;
    targets_eaten = xx;
    vblank_tile_queue_pos = xx;


    // By default start in the centre of the map
    current_tile_index = xx = MAP_TILE_SIZE / 2 + MAP_TILE_WIDTH / 2;
    tile_movement_counter = a = 4;


    // Extract starting position and n targets
    //  NOTE: also normalizes SMALL_TARGET_TILE to TARGET_TILE and P1_STARTING_TILE to 0.

    current_tile_index = xx = MAP_TILE_SIZE / 2 - (MAP_TILE_WIDTH / 2);

    // yy holds n_targets
    yy = 0;
    for xx in 0 .. MAP_TILE_SIZE {
        a = get_map_tile(xx);

        if a == P1_STARTING_TILE {
            current_tile_index = xx;
            set_map_tile_imm(xx, 0);
        }
        else if (a == SMALL_TARGET_TILE) {
            set_map_tile_imm(xx, TARGET_TILE);
            yy++;
        }
        else if (a == TARGET_TILE) {
            yy++;
        }
    }

    n_targets_left = yy;


    // The snake starts with a 1 tile tail and is facing north
    // Draw the tail and first tile of the snake
    // (and set the position of the camera)

    a = Direction.NONE as u8;
    direction = a as Direction;
    next_direction = a as Direction;

    a = Direction.NORTH as u8;
    previous_direction = a as Direction;

    camera_rotation = 0;

    set_map_tile_imm(xx = current_tile_index, a = SNAKE_NORTH_TILE);

    mem16();
    #[mem16] {
        let TILE_AXIS_MASK = (MAP_TILE_WIDTH - 1);

        // Ensure there is enough room to move the snake
        aa = current_tile_index;
        if aa < MAP_TILE_WIDTH * 5 {
            break_handler();
        }

        // Move current_tile_index north one tile
        current_tile_index = aa = aa - MAP_TILE_WIDTH;

        position.x = aa = ((current_tile_index & TILE_AXIS_MASK) << 3) + 4;
        position.y = aa = ((current_tile_index >>> (7 - 3)) & (TILE_AXIS_MASK << 3)) + 4;
    }
    mem8();

    current_tile_id = a = get_map_tile(xx = current_tile_index);

    set_map_tile_imm(xx = current_tile_index, a = SNAKE_HEAD_TILE_ID);

    init_ppu();
}


#[mem8, idx16]
func wait_frame() {
    wait_for_vblank();

    snes.dma.hdma_enable = 0;

    a = camera_rotation;
    ^if a >= mode7_hdma_data.N_ROTATIONS {
        // HDMA perspective disabled

        snes.ppu.bg1_scroll_x = a = <:position.x - (256 / 2 - 1);
        snes.ppu.bg1_scroll_x = a = >:position.x -# 0;
        snes.ppu.bg1_scroll_y = a = <:position.y - (224 / 2);
        snes.ppu.bg1_scroll_y = a = >:position.y -# 0;

        snes.ppu.mode7_center_x = 0;
        snes.ppu.mode7_center_x = 0;
        snes.ppu.mode7_center_y = 0;
        snes.ppu.mode7_center_y = 0;

        a = 1;
        snes.ppu.mode7_a = 0;
        snes.ppu.mode7_a = a;
        snes.ppu.mode7_b = 0;
        snes.ppu.mode7_b = 0;
        snes.ppu.mode7_c = 0;
        snes.ppu.mode7_c = 0;
        snes.ppu.mode7_d = 0;
        snes.ppu.mode7_d = a;
    }
    else {
        // HDMA perspective enabled

        snes.ppu.bg1_scroll_x = a = <:position.x - (256 / 2 - 1);
        snes.ppu.bg1_scroll_x = a = >:position.x -# 0;
        snes.ppu.bg1_scroll_y = a = <:position.y - (224 * 3 / 4 - 1);
        snes.ppu.bg1_scroll_y = a = >:position.y -# 0;

        snes.ppu.mode7_center_x = a = <:position.x;
        snes.ppu.mode7_center_x = a = >:position.x;
        snes.ppu.mode7_center_y = a = <:position.y;
        snes.ppu.mode7_center_y = a = >:position.y;

        // DMA 5: M7A
        // DMA 6: M7B + M7C
        // DMA 7: M7D

        a = snes.dma.CONTROL_MODE_AA;
        snes.dma5.control = a;
        snes.dma7.control = a;
        snes.dma6.control = a = snes.dma.CONTROL_MODE_AABB;

        snes.dma5.mdma_dest = a = <:&snes.ppu.mode7_a;
        snes.dma6.mdma_dest = a = <:&snes.ppu.mode7_b;
        snes.dma7.mdma_dest = a = <:&snes.ppu.mode7_d;

        a = #:far &mode7_hdma_data.tables;
        snes.dma5.src_address_bank = a;
        snes.dma6.src_address_bank = a;
        snes.dma7.src_address_bank = a;

        a = camera_rotation;

        mem16();
        #[mem16, idx16] {
            xx = aa = (aa & mode7_hdma_data.ROTATION_MASK) << 1;

            aa = *((far &mode7_hdma_data.tables as u24 + xx as u24) as far *u16);
            snes.dma5.src_address_hl = aa;
            snes.dma7.src_address_hl = aa;

            snes.dma6.src_address_hl = aa = aa + mode7_hdma_data.TABLE_A_SIZE;
        }
        mem8();

        snes.dma.hdma_enable = a = snes.dma.ENABLE_7 | snes.dma.ENABLE_6 | snes.dma.ENABLE_5;
    }


    // Update tiles
    yy = vblank_tile_queue_pos;
    if !zero {
        snes.ppu.vram_control = a = snes.ppu.VRAM_CONTROL_INCREMENT_1 | snes.ppu.VRAM_CONTROL_REMAP_MODE_0 + snes.ppu.VRAM_CONTROL_SIZE_8;

        do {
            snes.ppu.vram_address_hl = xx = *((&vblank_tile_queue[0].tile_address as u16 - 3 + yy) as *u16);
            snes.ppu.vram_write_data_l = a = *((&vblank_tile_queue[0].tile_value as u16 - 3 + yy) as *u8);

            yy--;
            yy--;
            yy--;
        } while !zero;
    }
    vblank_tile_queue_pos = yy = 0;


    // Transfer snake_head_tile buffer to VRAM

    snes.ppu.vram_address_hl = xx = SNAKE_HEAD_TILE_ID * 64;
    transfer_vram_h(#:far& snake_head_tile, &snake_head_tile as u16, sizeof(typeof(snake_head_tile)));


    snes.ppu.brightness = a = 0xf;


    update_joypad();
}


#[mem8, idx16]
func set_map_tile(index : u16 in xx, value : u8 in a) {

    // ::ANNOY This is the only way to force wiz to use long addressing mode::
    ((far &map as u24) as far *u8)[xx] = a;


    yy = vblank_tile_queue_pos;
    if yy >= sizeof(typeof(vblank_tile_queue)) {
        break_handler();
    }

    *((&vblank_tile_queue[0].tile_value as u16 + yy) as *u8) = a;

    mem16();
    #[mem16, idx16] {
        aa = xx;
        *((&vblank_tile_queue[0].tile_address as u16 + yy) as *u16) = aa;;
    }
    mem8();

    yy++;
    yy++;
    yy++;

    vblank_tile_queue_pos = yy;
}


#[mem8, idx16]
inline func process_dpad_no_perspective() {

    a = >:joypad1.pressed;

    if a & joypadh.RIGHT != 0 {
        a = Direction.EAST as u8;
    }
    else if a & joypadh.LEFT != 0 {
        a = Direction.WEST as u8;
    }
    else if a & joypadh.UP != 0 {
        a = Direction.NORTH as u8;
    }
    else if a & joypadh.DOWN != 0 {
        a = Direction.SOUTH as u8;
    }
    else {
        return;
    }
    next_direction = a as Direction;
}


#[mem8, idx16]
inline func process_dpad_perspective() {
    idx8();
    #[idx8] {
        a = >:joypad1.pressed;
        y = direction as u8;

        if y == Direction.NONE as u8 {
            // Snake is alive and not moving (first button press)

            if a & joypadh.RIGHT != 0 {
                y = Direction.EAST as u8;
            }
            else if a & joypadh.LEFT != 0 {
                y = Direction.WEST as u8;
            }
            else if a & joypadh.UP != 0 {
                y = Direction.NORTH as u8;
            }

            next_direction = y as Direction;
        }
        else if y < N_MOVEMENT_DIRECTIONS {
            // Snake is alive and moving

            if a & (joypadh.RIGHT | joypadh.LEFT) != 0 {
                // only update next_direction if left or right is pressed

                if a & joypadh.RIGHT != 0 {
                    y++;
                }
                else {
                    // left
                    y--;
                }
                a = y & DIRECTION_MOVEMENT_MASK;
                next_direction = a as Direction;
            }
        }
    }
    idx16();
}

#[mem8, idx16]
inline func update_camera_rotation() {
    a = camera_rotation;
    return if a >= mode7_hdma_data.N_ROTATIONS;

    a = direction as u8;
    return if a >= N_MOVEMENT_DIRECTIONS;

    idx8();
    #[idx8] {
        // a = direction
        a = a << mode7_hdma_data.DIRECTION_ROTATION_SHIFT;
        // a = target camera_rotation

        if a != camera_rotation {
            y = camera_rotation;

            a = y >>> mode7_hdma_data.DIRECTION_ROTATION_SHIFT;

            a = ++a & DIRECTION_MOVEMENT_MASK;
            if a == direction as u8 {
                y++;
            }
            else {
                y--;
            }

            camera_rotation = a = y & mode7_hdma_data.ROTATION_MASK;
        }
    }
    idx16();
}


#[mem8, idx16]
inline func process_movement() {
    let _tmp_b = dptmp_b3;


    // Initially tried to do a `jsr (addr,x)` here, but I couldn't
    // figure out how to do it.
    a = direction as u8;
    if a == Direction.NORTH as u8 {
        xx = position.y;
        xx--;
        position.y = xx;
    }
    else if a == Direction.EAST as u8 {
        xx = position.x;
        xx++;
        position.x = xx;
    }
    else if a == Direction.SOUTH as u8 {
        xx = position.y;
        xx++;
        position.y = xx;
    }
    else if a == Direction.WEST as u8 {
        xx = position.x;
        xx--;
        position.x = xx;
    }
    else if a == Direction.NONE as u8 {
        // Do not increment tile_movement_counter when direction is NONE
        tile_movement_counter--;
    }
    else {
        // DEAD
        ^return;
    }


    // Process tile movement

    tile_movement_counter++;
    a = tile_movement_counter;

    if a == 4 {
        // In middle of tile, change tile direction (if next_direction is valid)

        a = lookup_dual_direction_tile(next_direction as u8);
        if a != INVALID_MOVEMENT_TILE {
            a = next_direction as u8;
            direction = a as Direction;
        }

        // Test if player has eaten a target tile
        a = current_tile_id;
        if a == TARGET_TILE {
            increment_score();

            // Remove target from screen
            current_tile_id = 0;
        }
    }
    else if a >= 8 {
        // Moved onto a new tile

        // Set previous tile
        a = lookup_dual_direction_tile(direction as u8);
        set_map_tile(xx = current_tile_index, a = a);

        a = direction as u8;
        previous_direction = a as Direction;

        // Update tile index
        xx = current_tile_index;
        a = direction as u8;
        if a == Direction.NORTH as u8 {
            mem16();
            #[mem16] {
                xx = aa = xx - MAP_TILE_HEIGHT;
            }
            mem8();
        }
        else if a == Direction.EAST as u8 {
            xx++;
        }
        else if a == Direction.SOUTH as u8 {
            mem16();
            #[mem16] {
                xx = aa = xx + MAP_TILE_HEIGHT;
            }
            mem8();
        }
        else if a == Direction.WEST as u8 {
            xx--;
        }

        // Make player dead if outside the map
        if xx >= MAP_TILE_SIZE {
            a = Direction.DEAD as u8;
            direction = a as Direction;
        }

        current_tile_index = xx;

        // Test if we are in a wall or movement tile
        current_tile_id = a = get_map_tile(xx);
        if a >= FIRST_MOVEMENT_TILE {
            a = Direction.DEAD as u8;
            direction = a as Direction;
        }

        // Update which tile in the map is the snake head tile
        set_map_tile(xx, a = SNAKE_HEAD_TILE_ID);

        // Reset tile counter
        tile_movement_counter = 0;
    }
}


#[mem8, idx16]
inline func draw_snake_head_tile() {
    let _tmp = dptmp_b0;
    let _current_tile_data = dptmp_faraddr;

    tile_id_to_address_in_dptmp_faraddr(a = current_tile_id);

    // Calculate index of the snake movement frame
    a = direction as u8;
    if a >= N_MOVEMENT_DIRECTIONS {
        a = previous_direction as u8;
    }
    _tmp = a;

    a = previous_direction as u8;
    if a >= N_MOVEMENT_DIRECTIONS as u8 {
        return;
    }
    a <<<= 2;
    a += _tmp;

    idx8();
    #[mem8, idx8] {
        // ::ANNOY this is the only way I know how to force long addressing mode::
        x = a;
        a = ((far &snake_head_movement_tile_ids as u24) as far *u8)[x];
    }
    idx16();

    a += tile_movement_counter;

    mem16();
    #[mem16] {
        xx = aa = (aa & 0xff) << 6;     // Convert tileId to index
    }
    mem8();

    yy = 0;

    do {
        // ::ANNOY this is the only way I know how to force long addressing mode::
        a = ((far &snake_movement_tiles as u24) as far *u8)[xx];
        if a >= FIRST_SOLID_COLOR {
            snake_head_tile[yy] = a;

            // Kill player if the snake collides with a solid pixel
            // and current_tile_id != TARGET_TILE.
            a = _current_tile_data[yy];
            if a >= FIRST_SOLID_COLOR {
                a = current_tile_id;
                if a != TARGET_TILE {
                    a = Direction.DEAD as u8;
                    direction = a as Direction;
                }
            }
        }
        else {
            // Movement tile color is transparent, draw pixel from the current tile
            a = _current_tile_data[yy];
            snake_head_tile[yy] = a;
        }

        xx++;
        yy++;
    } while yy < 64;
}


// Calculates the address of a tile, storing it in `dptmp_faraddr`
#[mem8, idx16]
func tile_id_to_address_in_dptmp_faraddr(tile_id : u8 in a) {
    if a == SNAKE_HEAD_TILE_ID {
        a = #:far& snake_head_tile;
        xx = &snake_head_tile as u16;
    }
    else {
        mem16();
        #[mem16] {
            aa = ((aa & 0xff) <<< 6);
            aa += &mode7_tiles as u16;
            xx = aa;
        }
        mem8();

        a = #:far& mode7_tiles;
    }

    // ::ANNOY no easy way to write a 16 bit value to a `far *u8`::
    var _addr @ &dptmp_faraddr : u16;
    _addr = xx;

    // ::ANNOY no easy way to write the bank byte of a `far *u8`::
    var _far_addr @ &dptmp_faraddr : [u8 ; 3];
    _far_addr[2] = a;
}


#[mem8, idx16]
inline func increment_score() {
    mem16();
    #[mem16] {
        targets_eaten++;

        n_targets_left--;
        if negative {
            break_handler();
        }
    }
    mem8();
}


// Preforms a lookup between a given direction and the previous_direction.
//
// Returns the tile to use in the map.
//
// Returns INVALID_MOVEMENT_TILE if you cannot transition between
// previous_direction and the given direction.
#[mem8, idx16]
func lookup_dual_direction_tile(direction : u8 in a) : u8 in a {
    let _tmp = dptmp_b0;

    if a >= N_MOVEMENT_DIRECTIONS {
        return INVALID_MOVEMENT_TILE;
    }

    _tmp = a;

    a = previous_direction as u8;
    if a >= Direction.DEAD as u8 {
        return INVALID_MOVEMENT_TILE;
    }
    a <<<= 2;
    // carry clear
    a +#= _tmp;

    idx8();
    #[mem8, idx8] {
        x = a;

        // ::ANNOY this is the only way I know how to force long addressing mode::
        a = ((far &dual_direction_tiles as u24) as far *u8)[x];
    }
    idx16();

    return a;
}

#[mem8, idx16]
func gameloop() {
    init();

    ^do {
        wait_frame();

        a = camera_rotation;
        if a >= mode7_hdma_data.N_ROTATIONS {
            process_dpad_no_perspective();
        }
        else {
            process_dpad_perspective();
        }

        process_movement();

        update_camera_rotation();

        draw_snake_head_tile();

        a = direction as u8;
        break if a == Direction.DEAD as u8;

        xx = n_targets_left;
    } while !zero;

    wait_frame();
}

}
}

